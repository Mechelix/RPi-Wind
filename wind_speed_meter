from ABE_ADCPi import ADCPi
from ABE_helpers import ABEHelpers
import time
import threading
import os
import commands
import re
import struct
import ctypes
import socket

class WindSpeedMeter():
    _channel = 0
    _report_period = 5
    _pulses_counter = 0
    _last_sample_pulses = 0
    _last_sample_time = 0

    _thread = None
    _stop_requested = False

    _IPAddr = "127.0.0.1"
    _CtrlPort = 8200

    def GetLocalIP(self):
        ifconfig_cmd = commands.getoutput("ifconfig")
        patt = re.compile(r'inet\s*\w*\S*:\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})')
        addr_list = patt.findall(ifconfig_cmd)
        for addr in addr_list:
            if addr == "127.0.0.1":
                continue
##            if(self._nettype == NETTYPE.CELL):
##                if(addr.find("192.168.") == 0):
##                    continue
            if(addr.find('.')>0):
                return addr
        return "127.0.0.1"

    def __init__(self, channel, dir_channel, report_period = 5):
        self._channel = channel
        self._dir_channel = dir_channel
        self._report_period = report_period
        self._i2c_helper = ABEHelpers()
        self._bus = self._i2c_helper.get_smbus()
        self._adc = ADCPi(self._bus, 0x68, 0x69, 12)

        self._IPAddr = self.GetLocalIP()


    def Start(self):
        self._stop_requested = False
        self._thread = threading.Thread(target=self.SamplingThread)
        self._thread.start()
        print("sampling thread initialized")
        
    def SamplingThread(self):
        print("sampling thread started")

        mc_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
        #mc_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        mc_socket.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 100)
        mc_socket.bind((self._IPAddr, 8100))
        #mreq = struct.pack('4sl', socket.inet_aton("224.0.150.150"), socket.INADDR_ANY)
        mreq = struct.pack('4sl', socket.inet_aton("224.0.1.200"), socket.INADDR_ANY)
        mc_socket.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)
        #mc_socket.sendto("init", ("224.0.150.150", 8100))
        
        last_voltage = 0
        time_last_report = time.clock()*60
        self._last_sample_pulses = 0
        while(self._stop_requested != True):
            self._time_now = time.clock()*60
            voltage = self._adc.read_voltage(self._channel)
            if( (voltage > 0) and (last_voltage == 0)):
                self._pulses_counter += 1
                #print("pulses: " + str(self._pulses_counter))
            last_voltage = voltage

            time_now = time.clock()*60
            if(time_now > time_last_report):
                if(time_now - time_last_report >= self._report_period):
                    speed = (self._pulses_counter - self._last_sample_pulses)/(time_now - time_last_report)
                    print("speed: " + str(speed))
                    vcc = self._adc.read_voltage(8)
                    dir = self._adc.read_voltage(self._dir_channel)
                    mc_socket.sendto("VCC: %02f, WS: %02f, WD: %02f" % (vcc, speed, dir), ("224.0.1.200", 8200))
                    self._last_sample_pulses = self._pulses_counter
                    time_last_report = time_now
            else:
                time_last_report = time_now
            time.sleep(0.01)

    def Stop(self):
        if(self._thread == None):
            return
        self._stop_requested = True
        if(self._thread.isAlive()):
            self._thread.join();
        self._thread = None

sm = WindSpeedMeter(1, 2)
sm.Start()
